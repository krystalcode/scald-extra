<?php
/**
 * @file
 * Module file for the scald_extra module.
 */

include_once 'scald_extra.entity.inc';

/**
 * Implements hook_menu().
 */
function scald_extra_menu() {
  $items = array();

  // Add a "Settings" default tab for the default Scald configuration, so that
  // we can add an additional tab for the Scald Extra configuration.
  $items['admin/config/content/scald/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/content/scald/extra'] = array(
    'title' => 'Extra',
    'description' => 'Configuration for the Scald Extra plugin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scald_extra_admin_settings'),
    'access arguments' => array('administer scald'),
    'file' => 'scald_extra.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * The atom view page provided by the scald module is rendered using the
 * scald_render() function that renders the atom using its context and does not
 * take view modes into account. Override the page callback here so that we can
 * use view modes and take advantage of features like field groups.
 */
function scald_extra_menu_alter(&$items) {
  // The page callback requires the entity module to be enabled.
  if (variable_get('scald_extra_view_mode', TRUE) && module_exists('entity')) {
    $items['atom/%scald_atom']['page callback'] = '_scald_extra_atom_page_view';
  }
}

/**
 * Render the atom view page using the default view mode.
 */
function _scald_extra_atom_page_view($atom) {
  // The default ScaldAtomController extends the DrupalDefaultEntityController
  // probably so that it doesn't depend on the entity module. We to make use of
  // the page building and rendering functionality provided by the entity
  // module, so we use a custom controller that extends EntityAPIController.
  $controller = new ScaldAtomEntityAPIController('scald_atom');
  return $controller->view(array($atom), 'full');
}

/**
 * Implements hook_scald_contexts().
 *
 * It automatically generates a context for all or some image styles. This,
 * together with the scald_extra_scald_render() hook, provide an easy way to
 * have all image styles available in content view modes for rendering images
 * (through atoms).
 *
 * The value of the variable "scald_extra_generate_contexts" defines which image
 * styles to generate thumbnails for, and it can be set at the Scald Extra
 * administration page.
 *
 * @Issue("Allow to choose which image styles to generate contexts for")
 * @Issue("Optionally display a success message with the contexts that were generated")
 */
function scald_extra_scald_contexts() {
  $contexts = array();

  // Get the image styles to generate contexts for.
  $styles = _scald_extra_image_styles(variable_get('scald_extra_generate_contexts', 'all'));

  // Define a context for each image style.
  foreach ($styles as $style) {
    $contexts['image_' . $style['name']] = _scald_extra_context_array($style);
  }

  return $contexts;
}

/**
 * Implements hook_scald_render().
 *
 * Render the image only without any metadata (authors, tags) when the context
 * starts with image_ e.g. image_100x100.
 *
 * @Issue("Allow to choose whether to render metadata or not")
 */
function scald_extra_scald_render($atom, $context, $options) {
  if (strpos($context, 'image_') !== 0) {
    return;
  }

  return $atom->rendered->player;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function scald_extra_form_scald_atom_add_form_options_alter(&$form, &$form_state, $form_id) {
  // Custom validation callback for pre-generating image styles.
  if (variable_get('scald_extra_generate_thumbnails', TRUE)) {
    $form['#submit'][] = '_scald_extra_atom_add_form_options_submit_thumbnails';
  }
}

/**
 * Pre-generates thumbnails upon form submission.
 *
 * Custom submit callback that generates thumbnails for all or some image styles
 * for the uploaded image. This is done when uploading an image (in an atom) to
 * avoid performance issues in the case that many images are uploaded or
 * updated, or to avoid problems that happen sometimes with the thumbnails not
 * being generated until the next cache clearing.
 *
 * The value of the variable "scald_extra_generate_thumbnails" defines which
 * image styles to generate thumbnails for, and it can be set at the Scald Extra
 * administration page.
 *
 * @Issue(
 *   "Request a hook_scald_atom_insert() and move the code there",
 *   type="task",
 *   priority="low"
 * )
 * @Issue("Optionally display a success message with the thumbnails that were generated")
 */
function _scald_extra_atom_add_form_options_submit_thumbnails(&$form, &$form_state) {
  // Get the image styles to generate thumbnails for.
  $styles = _scald_extra_image_styles(variable_get('scald_extra_generate_thumbnails', 'all'));

  // Do not proceed if there are no styles ('none' configuration option).
  if (empty($styles)) {
    return;
  }

  // Do not proceed if the atom does not have an image field.
  // The image field in atoms is always the scald_thumbnail field.
  // If that's changed by adding new image field in one or more atom types, the
  // code here should be updated accordingly.
  if (empty($form['atom0']['scald_thumbnail'])) {
    return;
  }

  $language = $form['atom0']['scald_thumbnail']['#language'];

  // The updated file id is taken from the submitted values ($form_state).
  $fid = $form_state['values']['atom0']['scald_thumbnail'][$language][0]['fid'];
  if (!$fid) {
    return;
  }

  // Check if the file has been updated by comparing with the previous value
  // ($form). If not, do nothing because the thumbnails have most likely
  // already been generated when the image was originally uploaded.
  // Do this check only on edit atom forms because when we are adding a new atom
  // we are coming from the pre-options form, the image is already uploaded, the
  // previous value will be matching the submitted value, but we still want to
  // generate the thumbnails as the image is new.
  if (
    strpos($form['#action'], 'atom/add/') === FALSE &&
    $fid === $form['atom0']['scald_thumbnail'][$language][0]['#default_value']['fid']
  ) {
    return;
  }

  // Do nothing if the file can't be loaded (shouldn't happen at this stage).
  $file = file_load($fid);
  if (!$file) {
    return;
  }

  // The image (atom) could be referenced in any content type, in any view
  // mode, and using any image style. We therefore need to generate thumbnails
  // for all image styles for the image uploaded.
  foreach ($styles as $style) {
    // Check if thumbnail already exists.
    $destination = image_style_path($style['name'], $file->uri);
    if (file_exists($destination)) {
      continue;
    }

    // Generate thumbnail.
    image_style_create_derivative(
      $style,
      $file->uri,
      $destination
    );
  }
}

/**
 * Returns the image styles to generate context or thumbnails for.
 *
 * Given a configuration option, this function returns the corresponding image
 * styles. It should be used to get the image styles to generate context or
 * thumbnails for based on the corresponding configuration option.
 *
 * @param string $option
 *   The configuration option that should be choice between 'all', 'numeric' or
 *   'none'.
 *
 * @throws Exception
 *   If the configuration option does not have one of the supported values.
 *
 * @return array
 *   The image styles for the given configuration option.
 */
function _scald_extra_image_styles($option) {
  if ($option === 'none') {
    return array();
  }

  if ($option === 'all') {
    return image_styles();
  }

  if ($option !== 'numeric') {
    throw new Exception(
      sprintf(
        'The configuration option "%s" is not supported for filtering image styles.',
        $option
      )
    );
  }

  // If the Numeric configuration option is chosen for generating contexts or
  // thumbnails, filter out image styles that do not follow the numeric naming
  // convention.
  $styles = image_styles();
  foreach ($styles as $key => $style) {
    foreach (explode('x', $style['name']) as $name_part) {
      if (!is_numeric($name_part)) {
        unset($styles[$key]);
        continue 2;
      }
    }
  }

  return $styles;
}

/**
 * Generates the context array for a given image style.
 *
 * The context array is prepared as required by hook_scald_contexts(). This
 * function is just a helper function to keep the code a bit more tidy.
 *
 * @param array $style
 *   The image style to generate the context array for.
 *
 * @return array
 *   The context array as required by hook_scald_contexts().
 */
function _scald_extra_context_array(array $style) {
  return array(
    'title' => t('Image !label', array('!label' => $style['label'])),
    'description' => t('Image only without metadata using the !label style', array('!label' => $style['label'])),
    'render_language' => 'XHTML',
    'parseable' => TRUE,
    'hidden' => FALSE,
    'formats' => array(
      'image' => array('jpeg', 'png', 'passthrough'),
    ),
  );
}
