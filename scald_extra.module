<?php
/**
 * @file
 * Module file for the scald_extra module.
 */

include_once 'scald_extra.entity.inc';

/**
 * Implements hook_help().
 */
function scald_extra_help($path, $arg) {
  switch ($path) {
    case 'admin/help#scald_extra':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Scald Extra module provides additional useful functionality for projects using the Scald module ecosystem. Currently provided features are the following.') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('Automatic generation and rendering of scald contexts for selected image styles that render the atom as its image only.') . '</li>';
      $output .= '<li>' . t('Automatic generation of thumbnails for selected image styles when an image file is uploaded for an atom.') . '</li>';
      $output .= '</ul>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function scald_extra_menu() {
  $items = array();

  // Add a "Settings" default tab for the default Scald configuration, so that
  // we can add an additional tab for the Scald Extra configuration.
  $items['admin/config/content/scald/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/content/scald/extra'] = array(
    'title' => 'Extra',
    'description' => 'Configuration for the Scald Extra plugin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scald_extra_admin_scald_settings'),
    'access arguments' => array('administer scald'),
    'file' => 'scald_extra.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // Add a "Settings" default tab for the default DND Library configuration, so
  // that we can add an additional tab for the Scald Extra configuration.
  $items['admin/config/content/dnd/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/content/dnd/extra'] = array(
    'title' => 'Extra',
    'description' => 'Configuration for the Scald Extra plugin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scald_extra_admin_dnd_settings'),
    'access arguments' => array('administer scald'),
    'file' => 'scald_extra.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * The atom view page provided by the scald module is rendered using the
 * scald_render() function that renders the atom using its context and does not
 * take view modes into account. Override the page callback here so that we can
 * use view modes and take advantage of features like field groups.
 */
function scald_extra_menu_alter(&$items) {
  // The page callback requires the entity module to be enabled.
  if (variable_get('scald_extra_view_mode', TRUE) && module_exists('entity')) {
    $items['atom/%scald_atom']['page callback'] = '_scald_extra_atom_page_view';
  }
}

/**
 * Render the atom view page using the default view mode.
 */
function _scald_extra_atom_page_view($atom) {
  // The default ScaldAtomController extends the DrupalDefaultEntityController
  // probably so that it doesn't depend on the entity module. We to make use of
  // the page building and rendering functionality provided by the entity
  // module, so we use a custom controller that extends EntityAPIController.
  $controller = new ScaldAtomEntityAPIController('scald_atom');
  return $controller->view(array($atom), 'full');
}

/**
 * Implements hook_scald_contexts().
 *
 * It automatically generates a context for all or some image styles. This,
 * together with the scald_extra_scald_render() hook, provide an easy way to
 * have all image styles available in content view modes for rendering images
 * (through atoms).
 *
 * The value of the variable "scald_extra_generate_contexts" defines which image
 * styles to generate thumbnails for, and it can be set at the Scald Extra
 * administration page.
 *
 * @Issue(
 *   "Allow to choose which image styles to generate contexts for",
 *   type="feature",
 *   priority="normal"
 * )
 * @Issue(
 *   "Optionally display a success message with the contexts that were
 *   generated",
 *   type="improvement",
 *   priority="low"
 * )
 * @Issue(
 *   "Move bootstrap-related contexts and view modes to scald_bootstrap module"
 *   type="task"
 *   priority="normal"
 *   labels="modularity"
 * )
 */
function scald_extra_scald_contexts() {
  $contexts = array();

  // Get the image styles to generate contexts for.
  $styles = _scald_extra_image_styles(variable_get('scald_extra_generate_contexts', 'all'));

  // Define a context for each image style.
  foreach ($styles as $style) {
    $contexts['image_' . $style['name']] = _scald_extra_context_array($style);
  }

  // Add a context for the DND library item representation.
  if (variable_get('scald_extra_dnd_library', TRUE)) {
    $contexts['scald_bootstrap_library_item'] = array(
      'title'           => t('Scald Bootstrap Library item'),
      'description'     => t('The Scald Bootstrap DND Library Representation'),
      'render_language' => 'XHTML',
      'parseable'       => TRUE,
      'hidden'          => FALSE,
      'formats'         => array(),
    );
  }

  // Add a context or rendering atoms as Bootstrap media objects.
  $contexts['scald_bootstrap_media_object'] = array(
    'title'           => t('Bootstrap 3 Media Object'),
    'description'     => t('Atom representation as a Bootstrap 3 media object.'),
    'render_language' => 'XHTML',
    'parseable'       => TRUE,
    'hidden'          => FALSE,
    'formats'         => array(),
  );

  // Add a context for representing atoms in a single line (image and title as
  // link).
  $contexts['scald_extra_single_line'] = array(
    'title'           => t('Single Line Representation'),
    'description'     => t('Render atoms in a single line (image and title as a link).'),
    'render_language' => 'XHTML',
    'parseable'       => TRUE,
    'hidden'          => FALSE,
    'formats'         => array(),
  );

  return $contexts;
}

/**
 * Implements hook_scald_render().
 *
 * Render the image only without any metadata (authors, tags) when the context
 * starts with image_ e.g. image_100x100.
 *
 * @Issue(
 *   "Allow to choose whether to render metadata or not",
 *   type="feature",
 *   priority="low"
 * )
 */
function scald_extra_scald_render($atom, $context, $options) {
  // Check if a function for rendering the requested context exists, and use
  // it if so.
  $func = 'scald_extra_scald_render__' . $context;
  if (function_exists($func)) {
    return $func($atom, $context, $options);
  }

  // If there is no function for rendering the requested context, the context
  // must be one of the automatically generated ones for image styles. If not,
  // nothing more to do here.
  if (strpos($context, 'image_') !== 0) {
    return;
  }

  return $atom->rendered->player;
}

/**
 * Implements hook_scald_render() via scald_extra_scald_render().
 *
 * Context for rendering a scald DND library item as a bootstrap 3 media
 * object. The image style of the thumbnail needs to be defined at the
 * 'scald_bootstrap_library_item' view mode for each of the atom types in use.
 *
 * @Issue(
 *   "Provide a default image style for the library item thumbnail"
 *   type="improvement"
 *   priority="low"
 * )
 */
function scald_extra_scald_render__scald_bootstrap_library_item($atom, $context, $options) {
  // Action links
  $links = scald_atom_user_build_actions_links($atom, NULL);
  // Force all links to open in a new window
  foreach ($links as $action => $link) {
    $links[$action]['attributes']['target'] = '_blank';
  }
  // The Insert link. Use the "_" prefix to avoid collision with possible
  // "insert" action.
  $links['_insert'] = array(
    'title' => t('Insert'),
    'external' => TRUE,
    'fragment' => FALSE,
    'attributes' => array(
      'data-atom-id' => $atom->sid,
      'style' => 'display:none',
    ),
    'href' => '',
  );

  $links_element = array(
    '#theme' => 'links',
    '#links' => $links,
    '#attributes' => array('class' => array('links', 'inline')),
  );
  $rendered_links = drupal_render($links_element);

  // Get the icon that corresponds to the atom type.
  $icon = _scald_extra_icon($atom->type);

  // Get the thumbnail respecting the settings defined in the
  // 'scald_bootstrap_library_item' view mode.
  $image_render_array = array();
  $image_items = field_get_items('scald_atom', $atom, 'scald_thumbnail');
  if ($image_items) {
    $image_render_array = field_view_value('scald_atom', $atom, 'scald_thumbnail', $image_items[0], 'scald_bootstrap_library_item');
  }

  // Prepare and return the html.
  $html = '<div class="media drop" draggable="TRUE" data-atom-id="' . $atom->sid . '">';

  if (!empty($image_render_array)) {
    $html .= '<div class="media-left">' .
      render($image_render_array) .
      '</div>';
  }

  $html .= '<div class="media-body">' .
    '<h4 class="media-heading" style="font-size:14px">' .
    $atom->rendered->title .
    '</h4>' .
    $rendered_links .
    '</div>' .
    '<div class="media-right">' . $icon . '</div>' .
    '</div>';

  return $html;
}

/**
 * Implements hook_scald_render() via scald_extra_scald_render().
 *
 * Context for rendering a scald atom as a bootstrap 3 media object. The image
 * style of the thumbnail needs to be defined at the
 * 'scald_bootstrap_media_object' view mode for each of the atom types in use.
 *
 * @Issue(
 *   "Provide a default image style for the media object thumbnail"
 *   type="improvement"
 *   priority="low"
 * )
 */
function scald_extra_scald_render__scald_bootstrap_media_object($atom, $context, $options) {
  // Get the icon that corresponds to the atom type.
  $icon = _scald_extra_icon($atom->type);

  // Get the thumbnail respecting the settings defined in the
  // 'scald_bootstrap_media_object' view mode.
  $image_render_array = array();
  $image_items = field_get_items('scald_atom', $atom, 'scald_thumbnail');
  if ($image_items) {
    $image_render_array = field_view_value('scald_atom', $atom, 'scald_thumbnail', $image_items[0], 'scald_bootstrap_media_object');
  }

  // Get the description respecting the settings defined in the
  // 'scald_bootstrap_media_object' view mode.
  $description_items = field_get_items('scald_atom', $atom, 'scald_description');
  if ($description_items) {
    $description_render_array = field_view_value('scald_atom', $atom, 'scald_description', $description_items[0], 'scald_bootstrap_media_object');
  }

  // The title will be rendered as a link to the atom view page.
  /**
   * @Issue(
   *   "Do we need to check 'view/fetch' permissions?"
   *   type="bug"
   *   priority="low"
   *   labels="security"
   * )
   */
  $title = l(
    $atom->rendered->title, 'atom/' . $atom->sid,
    array(
      'attributes' => array(
        'target' => '_blank',
      ),
      'html' => TRUE,
    )
  );

  // Prepare and return the html.
  $html = '<div class="media" data-atom-id="' . $atom->sid . '">';

  if (!empty($image_render_array)) {
    $html .= '<div class="media-left">' .
      render($image_render_array) .
      '</div>';
  }

  $html .= '<div class="media-body">' .
    '<h4 class="media-heading">' .
    $title .
    '</h4>' .
    render($description_render_array) .
    '</div>' .
    '<div class="media-right">' . $icon . '</div>' .
    '</div>';

  return $html;
}

/**
 * Implements hook_scald_render().
 */
function scald_extra_scald_render__scald_extra_single_line($atom, $context, $options) {
  // Get the thumbnail in the '20x20' image style.
  /**
   * @Issue(
   *   "Provide the '20x20' image style"
   *   type="bug"
   *   priority="normal"
   * )
   */
  $image_element = '';
  $image_items = field_get_items('scald_atom', $atom, 'scald_thumbnail');
  if ($image_items) {
    $image_element = theme(
      'image_style',
      array(
        'style_name' => '20x20',
        'path'       => $image_items[0]['uri'],
      )
    );
  }
  // If there is no thumbnail, get the default icon used by the scald_file
  // module for its file representation.
  elseif (!empty($atom->base_entity)) {
    $image_element = '<img src="' . _scald_file_get_default_icon($atom->base_entity) . '">';
  }
  // If the atom does not have a base file, get the most appropriate icon based
  // on the atom type.
  else {
    $file = new stdClass();

    if ($atom->type == 'video') {
      $file->filemime = 'video/mp4';
    }
    elseif ($atom->type == 'audio') {
      $file->filemime = 'audio/mpeg';
    }
    elseif ($atom->type == 'url') {
      $file->filemime = 'application/x-mswinurl';
    }

    if (!empty($file->filemime)) {
      $image_element = '<img src="' . _scald_file_get_default_icon($file) . '">';
    }
  }

  // Wrap the thumbnail in a link.
  $image = l(
    $image_element,
    'atom/' . $atom->sid,
    array(
      'attributes' => array(
        'target' => '_blank',
      ),
      'html' => TRUE,
    )
  );

  // The title will be rendered as a link to the atom view page.
  /**
   * @Issue(
   *   "Do we need to check 'view/fetch' permissions?"
   *   type="bug"
   *   priority="low"
   *   labels="security"
   * )
   */
  $title = l(
    $atom->rendered->title,
    'atom/' . $atom->sid,
    array(
      'attributes' => array(
        'target' => '_blank',
      ),
      'html' => TRUE,
    )
  );

  // Return the html.
  return '<div class="scald-extra-single-line">' . $image . $title . '</div>';
}

/**
 * Implements hook_entity_info_alter().
 */
function scald_extra_entity_info_alter(&$entity_info){
  $entity_info['scald_atom']['view modes']['scald_bootstrap_library_item'] = array(
    'label' => t('Scald Bootstrap Library Item'),
    'custom settings' => TRUE,
  );
  $entity_info['scald_atom']['view modes']['scald_bootstrap_media_object'] = array(
    'label' => t('Bootstrap 3 Media Object'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function scald_extra_form_scald_atom_add_form_options_alter(&$form, &$form_state, $form_id) {
  // Custom validation callback for pre-generating image styles.
  if (variable_get('scald_extra_generate_thumbnails', TRUE)) {
    $form['#submit'][] = '_scald_extra_atom_add_form_options_submit_thumbnails';
  }
}

/**
 * Pre-generates thumbnails upon form submission.
 *
 * Custom submit callback that generates thumbnails for all or some image styles
 * for the uploaded image. This is done when uploading an image (in an atom) to
 * avoid performance issues in the case that many images are uploaded or
 * updated, or to avoid problems that happen sometimes with the thumbnails not
 * being generated until the next cache clearing.
 *
 * The value of the variable "scald_extra_generate_thumbnails" defines which
 * image styles to generate thumbnails for, and it can be set at the Scald Extra
 * administration page.
 *
 * @Issue(
 *   "Request a hook_scald_atom_insert and move the code there",
 *   type="improvement",
 *   priority="normal"
 * )
 * @Issue(
 *   "Optionally display a success message with the thumbnails that were
 *   generated"
 *   type="improvement",
 *   priority="low"
 * )
 */
function _scald_extra_atom_add_form_options_submit_thumbnails(&$form, &$form_state) {
  // Get the image styles to generate thumbnails for.
  $styles = _scald_extra_image_styles(variable_get('scald_extra_generate_thumbnails', 'all'));

  // Do not proceed if there are no styles ('none' configuration option).
  if (empty($styles)) {
    return;
  }

  // Do not proceed if the atom does not have an image field.
  // The image field in atoms is always the scald_thumbnail field.
  // If that's changed by adding new image field in one or more atom types, the
  // code here should be updated accordingly.
  if (empty($form['atom0']['scald_thumbnail'])) {
    return;
  }

  $language = $form['atom0']['scald_thumbnail']['#language'];

  // The updated file id is taken from the submitted values ($form_state).
  $fid = $form_state['values']['atom0']['scald_thumbnail'][$language][0]['fid'];
  if (!$fid) {
    return;
  }

  // Check if the file has been updated by comparing with the previous value
  // ($form). If not, do nothing because the thumbnails have most likely
  // already been generated when the image was originally uploaded.
  // Do this check only on edit atom forms because when we are adding a new atom
  // we are coming from the pre-options form, the image is already uploaded, the
  // previous value will be matching the submitted value, but we still want to
  // generate the thumbnails as the image is new.
  if (
    strpos($form['#action'], 'atom/add/') === FALSE &&
    $fid === $form['atom0']['scald_thumbnail'][$language][0]['#default_value']['fid']
  ) {
    return;
  }

  // Do nothing if the file can't be loaded (shouldn't happen at this stage).
  $file = file_load($fid);
  if (!$file) {
    return;
  }

  // The image (atom) could be referenced in any content type, in any view
  // mode, and using any image style. We therefore need to generate thumbnails
  // for all image styles for the image uploaded.
  foreach ($styles as $style) {
    // Check if thumbnail already exists.
    $destination = image_style_path($style['name'], $file->uri);
    if (file_exists($destination)) {
      continue;
    }

    // Generate thumbnail.
    image_style_create_derivative(
      $style,
      $file->uri,
      $destination
    );
  }
}

/**
 * Returns the image styles to generate contexts or thumbnails for.
 *
 * Given a configuration option, this function returns the corresponding image
 * styles. It should be used to get the image styles to generate context or
 * thumbnails for based on the corresponding configuration option.
 *
 * @param string $option
 *   The configuration option that should be choice between 'all', 'numeric' or
 *   'none'.
 *
 * @throws Exception
 *   If the configuration option does not have one of the supported values.
 *
 * @return array
 *   The image styles for the given configuration option.
 */
function _scald_extra_image_styles($option) {
  if ($option === 'none') {
    return array();
  }

  if ($option === 'all') {
    return image_styles();
  }

  if ($option !== 'numeric') {
    throw new Exception(
      sprintf(
        'The configuration option "%s" is not supported for filtering image styles.',
        $option
      )
    );
  }

  // If the Numeric configuration option is chosen for generating contexts or
  // thumbnails, filter out image styles that do not follow the numeric naming
  // convention.
  $styles = image_styles();
  foreach ($styles as $key => $style) {
    foreach (explode('x', $style['name']) as $name_part) {
      if (!is_numeric($name_part)) {
        unset($styles[$key]);
        continue 2;
      }
    }
  }

  return $styles;
}

/**
 * Generates the context array for a given image style.
 *
 * The context array is prepared as required by hook_scald_contexts(). This
 * function is just a helper function to keep the code a bit more tidy.
 *
 * @param array $style
 *   The image style to generate the context array for.
 *
 * @return array
 *   The context array as required by hook_scald_contexts().
 */
function _scald_extra_context_array(array $style) {
  return array(
    'title' => t('Image !label', array('!label' => $style['label'])),
    'description' => t('Image only without metadata using the !label style', array('!label' => $style['label'])),
    'render_language' => 'XHTML',
    'parseable' => TRUE,
    'hidden' => FALSE,
    'formats' => array(
      'image' => array('jpeg', 'png', 'gif', 'passthrough'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function scald_extra_theme(&$existing, $type, $theme, $path) {
  $hooks['scald_extra_dnd_library'] = array(
    // @Issue("These variables are probably not needed to be passed")
    'variables' => array(
      'summary_search_title' => '',
      'summary_search_subtitle' => '',
      'summary_list_title' => '',
      'summary_list_subtitle' => '',
      'list-summary' => array(),
      'add-buttons' => array(),
      'toggle-button' => NULL,
      'search-button' => NULL,
      'filters' => NULL,
      'list' => array(),
    ),
    'template' => 'templates/dnd-library',
  );
  return $hooks;
}

/**
 * Implements hook_views_api().
 */
function scald_extra_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'scald_extra') . '/views',
  );
}

/**
 * Implements hook_js_alter().
 */
function scald_extra_js_alter(&$javascript) {
  if (!variable_get('scald_extra_dnd_library', TRUE)) {
    return;
  }

  $old_path = drupal_get_path('module', 'scald') . '/modules/library/dnd/js/dnd-library.js';
  $new_path = drupal_get_path('module', 'scald_extra') . '/js/dnd-library.js';

  // Let the dnd module to control when the js should be loaded and when not. If
  // the original js is not included, nothing to do here.
  if (!isset($javascript[$old_path])) {
    return;
  }

  // Pass on the width variables to js.
  $settings = array(
    'dnd_wrapper_width' => variable_get('scald_extra_dnd_wrapper_width', '323'),
    'dnd_menu_width' => variable_get('scald_extra_dnd_menu_width', '41'),
    'dnd_content_width' => variable_get('scald_extra_dnd_content_width', '280'),
  );
  drupal_add_js(
    array('scald_extra' => $settings),
    'setting'
  );

  // Replace the js path keeping the rest of its settings the same.
  $javascript[$new_path] = $javascript[$old_path];
  $javascript[$new_path]['data'] = $new_path;
  unset($javascript[$old_path]);
}

/**
 * Implements hook_css_alter().
 */
function scald_extra_css_alter(&$css) {
  if (!variable_get('scald_extra_dnd_library', TRUE)) {
    return;
  }

  $old_path = drupal_get_path('module', 'scald') . '/modules/library/dnd/css/dnd-library.css';
  $new_path = drupal_get_path('module', 'scald_extra') . '/css/dnd-library.css';

  // Let the dnd module to control when the js should be loaded and when not. If
  // the original js is not included, nothing to do here.
  if (!isset($css[$old_path])) {
    return;
  }

  // Replace the css path keeping the rest of its settings the same.
  if (variable_get('scald_extra_dnd_css')) {
    $css[$new_path] = $css[$old_path];
    $css[$new_path]['data'] = $new_path;
  }

  // We're removing the old css even if the "scald_extra_dnd_css" is set to
  // FALSE, because this would mean that we will be providing the styles
  // separately.
  unset($css[$old_path]);
}

function _scald_extra_icon_defaults() {
  if (module_exists('icon')) {
    $bundles = icon_bundles();

    if (!empty($bundles['fontawesome'])) {
      return array(
        'bundle' => 'fontawesome',
        'icons' => _scald_extra_icon_defaults_fontawesome(),
      );
    }

    if (!empty($bundles['bootstrap'])) {
      return array(
        'bundle' => 'bootstrap',
        'icons' => _scald_extra_icon_defaults_bootstrap(),
      );
    }
  }

  if (
    function_exists('_bootstrap_glyphicons_supported') &&
    _bootstrap_glyphicons_supported()
  ) {
    return array(
      'bundle' => 'bootstrap',
      'icons' => _scald_extra_icon_defaults_bootstrap(),
    );
  }
}

function _scald_extra_icon_defaults_fontawesome() {
  static $icon_defaults;
  if (!isset($icon_defaults)) {
    $icon_defaults = array(
      'audio' => 'microphone',
      'embed' => 'link',
      'file' => 'file-o',
      'iframe' => 'link',
      'image' => 'picture-o',
      'video' => 'video-camera',
      'url' => 'link',
    );
  }

  return $icon_defaults;
}

function _scald_extra_icon_defaults_bootstrap() {
  static $icon_defaults;
  if (!isset($icon_defaults)) {
    $icon_defaults = array(
      'audio' => 'glyphicon-headphones',
      'embed' => 'glyphicon-link',
      'file' => 'glyphicon-file',
      'iframe' => 'glyphicon-link',
      'image' => 'glyphicon-picture',
      'video' => 'glyphicon-facetime-video',
      'url' => 'glyphicon-link',
    );
  }

  return $icon_defaults;
}

function _scald_extra_icon($type) {
  static $icons;

  if (module_exists('icon')) {
    $icon = variable_get('scald_extra_' . $type . '_icon');

    if (!$icon) {
      $icons = _scald_extra_icon_defaults();

      if (!empty($icons)) {
        $icon = array(
          'bundle' => $icons['bundle'],
          'icon' => $icons['icons'][$type],
        );
      }
    }

    if (!empty($icon['bundle'] && !empty($icon['icon']))) {
      if ($icon['bundle'] === 'fontawesome') {
        $icon['attributes']['class'][] = 'fa-fw';
      }

      return theme('icon', $icon);
    }
  }

  if (
    function_exists(_bootstrap_glyphicon_supported()) &&
    _bootstrap_glyphicon_supported()
  ) {
    $icons = _scald_extra_icon_defaults_bootstrap();
    return '<i class="icon glyphicon glyphicon-' . $icons[$type] . '"></i>';
  }

  return '';
}
